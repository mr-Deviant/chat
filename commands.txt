net start MongoDB

# All commands was performed on site www.nitrous.io

# Install AngularJS generator (this will automatically install Yeoman, Grunt and Bower)
npm install -g generator-angular

# Change directory to current project directory
cd my-project-folder
 
# Scaffold out a AngularJS project
yo angular

# create model/collection/view
yo angular:controller myController
yo angular:directive myDirective
yo angular:filter myFilter
yo angular:service myService
 
# Search for a dependency in the Bower registry.
bower search <dep>

# Install one or more dependencies.
bower install --save <dep>..<depN>

# List out the dependencies you have installed for a project.
bower list

# Update a dependency to the latest version available.
bower update <dep>

clear

# If you're using RequireJS...
grunt bower
> Injects your Bower dependencies into your RequireJS configuration.

# If you're not using RequireJS...
grunt bower-install
> Injects your dependencies into your index.html file.

# Preview an app you have generated (with Livereload).
grunt serve

# Run the unit tests for an app.
grunt test

# Build an optimized, production-ready version of your app.
grunt



Чтобы вытащить копию репозитории нужно сделать так:
git clone http://.....

Потом можно чтото поменять и закомитить себе в свою локальную историю изминения:
git commit -am "My changes..."

После этого нужно запихнуть на эталонный сервер командой
git push

Чтобы стянуть чьи-то изменения
git pull

Чтобы посмотреть список измененных файлов
git status

Чтобы посмотреть что конкретно было изменено
git diff

Чтобы отревертить измененный файл
git checkout путь/к/файлу


http://stackoverflow.com/questions/5178334/folder-structure-for-a-nodejs-project

When building a rather large application, i recommend the following additional folders (especially if you are using some kind of MVC- / ORM-Framework like express or mongoose):

    /models contains all your ORM models (called Schemas in mongoose)
    /views contains your view-templates (using any templating language supported in express)
    /public contains all static content (images, style-sheets, client-side JavaScript)
        /assets/images contains image files
        /assets/pdf contains static pdf files
        /css contains style sheets (or compiled output by a css engine)
        /js contains client side JavaScript
    /controllers contain all your express routes, separated by module/area of your application (note: when using the bootstrapping functionality of express, this folder is called /routes)

I got used to organize my projects this way and i think it works out pretty well.